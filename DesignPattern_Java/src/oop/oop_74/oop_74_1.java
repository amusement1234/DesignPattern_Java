
// 面向对象：封装继承多态、面向对象编程vs面向过程编程、面向对象分析设计编程、接口vs抽象类、基于接口而非实现编程、多用组合少用继承、贫血模型和充血模型
// 设计原则：单一、开闭、里斯替换、接口隔离、依赖倒置、dry、kiss
// 代码重构：目的、对象、时机、方法。单元测试、大重构、小重构

// 创建型：单例、工厂（工厂方法、抽象工厂）、建造者。不常用：原型
// 结构型：代理、桥接、装饰者、适配器。不常用：门面、组合、享元
// 行为型：观察者、模板、策略、职责链、迭代器、状态。不常用：访问者、备忘录、命令、解释器、中介



// 一、创建型设计模式
// 创建型设计模式包括：单例模式、工厂模式、建造者模式、原型模式。
// 它主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。

// 1. 单例模式
// 单例模式用来创建全局唯一的对象。一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例模式。
// 单例有几种经典的实现方式，它们分别是：饿汉式、懒汉式、双重检测、静态内部类、枚举。


// 2. 工厂模式
// 工厂模式包括简单工厂、工厂方法、抽象工厂这 3 种细分模式。其中，简单工厂和工厂方法比较常用，抽象工厂的应用场景比较特殊，所以很少用到，不是我们学习的重点。

// 工厂模式用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。
// 实际上，如果创建对象的逻辑并不复杂，那我们直接通过 new 来创建对象就可以了，不需要使用工厂模式。当创建逻辑比较复杂，是一个“大工程”的时候，我们就考虑使用工厂模式，封装对象的创建过程，将对象的创建和使用相分离。

// 当每个对象的创建逻辑都比较简单的时候，我推荐使用简单工厂模式，将多个对象的创建逻辑放到一个工厂类中。当每个对象的创建逻辑都比较复杂的时候，为了避免设计一个过于庞大的工厂类，我们推荐使用工厂方法模式，将创建逻辑拆分得更细，每个对象的创建逻辑独立到各自的工厂类中。

// 工厂模式的作用：封装变化、代码复用、隔离复杂性、控制复杂性


// 3. 建造者模式
// 建造者模式用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象。建造者模式的原理和实现比较简单，重点是掌握应用场景，避免过度使用。
// 如果一个类中有很多属性，为了避免构造函数的参数列表过长，影响代码的可读性和易用性，我们可以通过构造函数配合 set() 方法来解决。但是，如果存在下面情况中的任意一种，我们就要考虑使用建造者模式了。

// 必填属性放到构造函数中、属性之间有依赖关系或约束关系。


// 4. 原型模式
// 如果对象的创建成本比较大，而同一个类的不同对象之间差别不大（大部分字段都相同），在这种情况下，我们可以利用对已有对象（原型）进行复制（或者叫拷贝）的方式，来创建新对象，以达到节省创建时间的目的。这种基于原型来创建对象的方式就叫作原型模式。

// 原型模式有两种实现方法，深拷贝和浅拷贝。
// 操作非常耗时的情况下，我们比较推荐使用浅拷贝，否则，没有充分的理由，不要为了一点点的性能提升而使用浅拷贝。




// 二、结构型设计模式













